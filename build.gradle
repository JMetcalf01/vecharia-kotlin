import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

group 'vecharia'
version '1.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    production = false // used for code exclusion, see preprocessor task below
    kx = "com.github.kotlin-graphics"
    uno_version = 'f528113bf45e43406953d6881915467d85a20881'
    gln_version = '880960aeaf813f72242f03458cf44e606d4c05f0'
    glm_version = '1b4ac18dd1a3c23440d3f33596688aac60bc0141'
    lwjgl_version = "3.2.3"
    lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // OpenGL/GLFW
    ["", "-glfw", "-opengl", "-openal", "-stb"].each {
        String base = "org.lwjgl:lwjgl$it:$lwjgl_version"
        implementation base
        String natives = "$base:natives-$lwjgl_natives"
        runtimeOnly natives
//        shadow natives
    }

    // Uno is a wrapper on opengl to make it slightly nicer to use.
    ["core", "gl"].each {
        implementation "${kx}.uno-sdk:uno-$it:$uno_version"
    }

    // GLM and GLN are wrappers around opengl (similar to lwjgl 3)
    // I (matt) do not really want to use these in the future.
    implementation "${kx}.glm:glm:$glm_version"
    implementation "$kx:gln:$gln_version"

    // ImGUI is a helpful gui library for playing with values during runtime.
    ["gl", "glfw", "core"].each {
        implementation "com.github.kotlin-graphics.imgui:imgui-$it:-SNAPSHOT"
    }














    // todo remove all below this
    api "com.badlogicgames.gdx:gdx:1.9.10"
    api "com.badlogicgames.gdx:gdx-backend-lwjgl:1.9.10"
    api "com.badlogicgames.gdx:gdx-platform:1.9.10:natives-desktop"
    api "com.badlogicgames.gdx:gdx-freetype:1.9.10"
    api "com.badlogicgames.gdx:gdx-freetype-platform:1.9.10:natives-desktop"
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

// Gradle Source Preprocessor
// https://gist.github.com/mworzala/43c24ff574e15d94c1186167af5cc622
task preprocessor(type: Copy) {
    boolean inTag = false
    from 'src/main/kotlin'
    into "$buildDir/processed-src"
    filter { line ->
        String updated = line

        try {
            if (line.trim().startsWith("//PP.IF") && project.ext[line.replace("//PP.IF", "").trim()] as boolean)
                inTag = true
        } catch (MissingPropertyException ignored) { }

        if (inTag) updated = null

        if (line.trim().startsWith("//PP.ENDIF"))
            inTag = false

        return updated
    }
}

preprocessor.dependsOn(clean)

['compileKotlin'].each {
    tasks[it].doFirst {sourceSets.main.kotlin.srcDirs = ["$buildDir/processed-src"]}
    tasks[it].dependsOn(preprocessor)
    tasks[it].doLast {sourceSets.main.kotlin.srcDirs = ["src/main/kotlin"]}
}